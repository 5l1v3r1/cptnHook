#! /usr/bin/env python

import os
import sys
import argparse
import platform

preloadVarName = 'DYLD_INSERT_LIBRARIES' if platform.system() == 'Darwin' else 'LD_PRELOAD'
libraryExtension = '.dylib' if platform.system() == 'Darwin' else '.so'
thisScriptPath = os.path.realpath(__file__)
thisPath = os.path.dirname(thisScriptPath)
libPath = thisPath+"/../lib/"
cptnhooklib = libPath+'libcptnHookLite'+libraryExtension

def getCommandAndArgs():
   p = argparse.ArgumentParser(description='Cptnhook: a tool to study function arguments.',
                               formatter_class=argparse.RawDescriptionHelpFormatter,
                               usage='cptnhook [args] -- program [args]\n'
                                     'IMPORTANT: note the "--" before the command invocation!')
   p.add_argument('-o', '--output', nargs='?', default = '', help='Profile output directory.')
   p.add_argument('--root', action='store_true', default = '', help='Create ROOT output.')
   p.add_argument('--debug', action='store_true', default = '', help='Enable debug output.')
   argv = sys.argv
   try:
       index = argv.index('--')
   except:
      p.print_help()
      sys.exit(1)
   cprnHookArgs = argv[1:index]
   progArgs = argv[index+1:]   
   command = "".join(progArgs)
   cptnHookParsedArgs = p.parse_args(cprnHookArgs)
   return command, cptnHookParsedArgs

def go():
   command, parsedArgs = getCommandAndArgs()

   if parsedArgs.root and parsedArgs.output == '':
       print "Error: A conversion to ROOT format was requested but no output directory was specified!"
       sys.exit(1)

   command = "%s=%s %s" %(preloadVarName, cptnhooklib, command)
   
   if parsedArgs.output != '':
      command = "CPTNHOOKLITE_PROFILEDIR=%s %s" %(parsedArgs.output, command)

   if parsedArgs.debug:
      command = "CPTNHOOKLITE_DEBUG=1 %s" %command
      
   commandRetVal = os.system(command)
   
   anaRetVal = 0
   if commandRetVal == 0 and parsedArgs.root:
      import imp
      cptnhookAnalyze = imp.load_source('cptnhookAnalyze',thisPath+"/cptnhookAnalyze")  
      anaRetVal = cptnhookAnalyze.analyze(parsedArgs.output, toROOT=True)
      
   return commandRetVal + anaRetVal
   
   
if __name__ == "__main__":
    sys.exit(go())